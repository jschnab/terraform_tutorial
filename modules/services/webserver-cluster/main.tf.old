terraform {
	backend "s3" {
		bucket = "terraform-state-jschnab11435"
		key = "stage/services/webserver-cluster/terraform.tfstate"
		region = "us-east-1"
	}
}

provider "aws" {
	region = "us-east-1"
}

resource "aws_launch_configuration" "test" {
	image_id = "ami-40d28157"
	instance_type = "t2.micro"
	security_groups = ["${aws_security_group.sg_instances.id}"]

	user_data = "${data.template_file.user_data.rendered}"
}

data "template_file" "user_data" {
	template = "${file("user_data.sh")}"

	vars = {
		server_port = "${var.server_port}"
	}
}

resource "aws_security_group" "sg_instances" {
	name = "terraform-sg-instances"

	ingress {
		to_port = "${var.server_port}"
		from_port = "${var.server_port}"
		protocol = "tcp"
		security_groups = ["${aws_security_group.sg_elb.id}"]
		
	}
}

data "aws_availability_zones" "all" {}

resource "aws_autoscaling_group" "asg-test" {
	launch_configuration = "${aws_launch_configuration.test.id}"
	availability_zones = "${data.aws_availability_zones.all.names}"

	health_check_type = "ELB"
	load_balancers = ["${aws_elb.test_elb.name}"]

	min_size = 2
	max_size = 10

	tag {
		key = "Name"
		value = "terraform-asg-test"
		propagate_at_launch = true
	}
}

resource "aws_security_group" "sg_elb" {
	name = "terraform-sg-elb"

	ingress {
		to_port = 80
		from_port = 80
		protocol = "tcp"
		cidr_blocks = ["0.0.0.0/0"]
	}

	egress {
		to_port = 0
		from_port = 0
		protocol = "-1"
		cidr_blocks = ["0.0.0.0/0"]
	}
}

resource "aws_elb" "test_elb" {
	name = "terraform-elb-test"
	availability_zones = "${data.aws_availability_zones.all.names}"
	security_groups = ["${aws_security_group.sg_elb.id}"]

	health_check {
		healthy_threshold = 2
		unhealthy_threshold = 2
		timeout = 10
		interval = 30
		target = "HTTP:${var.server_port}/"
	}

	listener {
		lb_port = 80
		lb_protocol = "http"
		instance_port = "${var.server_port}"
		instance_protocol = "http"
	}
}
